// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DatonomyKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AdSupport
@_exported import DatonomyKit
import Foundation
import SQLite3
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import os.log
import os
public enum SdkState : Swift.String {
  case initialized
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class AdImpression : Swift.Codable {
  public init(revenue: Swift.Double, networkName: Swift.String, typeAds: DatonomyKit.AdsType, currency: DatonomyKit.Currency)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class TransactionIAP : Swift.Codable {
  public init(originalID: Swift.String, amount: Swift.Double, currency: DatonomyKit.Currency)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum DatonomySDKError : Swift.Error {
  case invalidApiKey(message: Swift.String)
  case sdkNotInitialized(message: Swift.String)
  case invalidEvent(message: Swift.String)
  case processingError(message: Swift.String)
  case notAuthorized
}
public enum Currency : Swift.String, Swift.Codable {
  case EUR
  case USD
  case BRL
  case GBP
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias CCallbackWithInt = @convention(c) (Swift.Int) -> Swift.Void
public typealias CCallbackLtvScore = @convention(c) (Swift.Double) -> Swift.Void
@_cdecl("datonomyKit_initialize")
public func datonomyKit_initialize(apiKey: Swift.UnsafePointer<Swift.CChar>, _ onComplete: DatonomyKit.CCallbackWithInt)
@_cdecl("DatonomyKit_event")
public func sendEventSDKUnity(payload: Swift.UnsafePointer<Swift.CChar>, onComplete: DatonomyKit.CCallbackWithInt)
@_cdecl("DatonomyKit_getLTVScore")
public func getLTVscoreSDKUnity(_ onComplete: DatonomyKit.CCallbackLtvScore)
@objc public enum DatonomySDKLogLevel : Swift.Int {
  case off = 0
  case error = 1
  case warning = 2
  case info = 3
  case debug = 4
  case verbose = 5
  public var name: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension DatonomyKit.DatonomySDKLogLevel : Swift.Comparable {
  public static func < (lhs: DatonomyKit.DatonomySDKLogLevel, rhs: DatonomyKit.DatonomySDKLogLevel) -> Swift.Bool
}
public enum AdsType : Swift.String, Swift.Codable {
  case banner
  case video
  case interstitial
  case rewarded
  case mrec
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class AdsRevenuePaid {
  public init(type: DatonomyKit.AdsType, revenue: Swift.Double)
  @objc deinit
}
public class DatonomySdk : DatonomyKit.DatonomyKitProtocol {
  public init()
  public func initialize(apiKey: Swift.String, _ completionHandler: @escaping (DatonomyKit.SdkState?, DatonomyKit.DatonomySDKError?) -> Swift.Void)
  public func getLTVScore(_ completionHandler: @escaping (Swift.Double?, DatonomyKit.DatonomySDKError?) -> Swift.Void)
  public func event(event: DatonomyKit.AdEvent, _ completionHandler: @escaping (Swift.Double?, DatonomyKit.DatonomySDKError?) -> Swift.Void)
  @objc deinit
}
public enum AdEventType : Swift.Int, Swift.Codable {
  case impression
  case sessionTime
  case inAppPurchase
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class AdEvent : ObjectiveC.NSObject, Swift.Codable {
  public init(type: DatonomyKit.AdEventType, sessionTime: Swift.Double? = nil, impression: DatonomyKit.AdImpression? = nil, transactionIAP: DatonomyKit.TransactionIAP? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public protocol DatonomyKitProtocol {
  func initialize(apiKey: Swift.String, _ completionHandler: @escaping (DatonomyKit.SdkState?, DatonomyKit.DatonomySDKError?) -> Swift.Void)
  func getLTVScore(_ completionHandler: @escaping (Swift.Double?, DatonomyKit.DatonomySDKError?) -> Swift.Void)
  func event(event: DatonomyKit.AdEvent, _ completionHandler: @escaping (Swift.Double?, DatonomyKit.DatonomySDKError?) -> Swift.Void)
}
extension DatonomyKit.SdkState : Swift.Equatable {}
extension DatonomyKit.SdkState : Swift.Hashable {}
extension DatonomyKit.SdkState : Swift.RawRepresentable {}
extension DatonomyKit.Currency : Swift.Equatable {}
extension DatonomyKit.Currency : Swift.Hashable {}
extension DatonomyKit.Currency : Swift.RawRepresentable {}
extension DatonomyKit.DatonomySDKLogLevel : Swift.Hashable {}
extension DatonomyKit.DatonomySDKLogLevel : Swift.RawRepresentable {}
extension DatonomyKit.AdsType : Swift.Equatable {}
extension DatonomyKit.AdsType : Swift.Hashable {}
extension DatonomyKit.AdsType : Swift.RawRepresentable {}
extension DatonomyKit.AdEventType : Swift.Equatable {}
extension DatonomyKit.AdEventType : Swift.Hashable {}
extension DatonomyKit.AdEventType : Swift.RawRepresentable {}
